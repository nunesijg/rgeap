// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// checkFileStructure
DataFrame checkFileStructure(const Rcpp::String& filename);
RcppExport SEXP _rgeap_checkFileStructure(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String& >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(checkFileStructure(filename));
    return rcpp_result_gen;
END_RCPP
}
// trackMatchingLines
NumericVector trackMatchingLines(const Rcpp::String& filename, CharacterVector& matchLines, bool prefixOnly, bool lineFeedOnly, long binOffset, long maxBinRead);
RcppExport SEXP _rgeap_trackMatchingLines(SEXP filenameSEXP, SEXP matchLinesSEXP, SEXP prefixOnlySEXP, SEXP lineFeedOnlySEXP, SEXP binOffsetSEXP, SEXP maxBinReadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type matchLines(matchLinesSEXP);
    Rcpp::traits::input_parameter< bool >::type prefixOnly(prefixOnlySEXP);
    Rcpp::traits::input_parameter< bool >::type lineFeedOnly(lineFeedOnlySEXP);
    Rcpp::traits::input_parameter< long >::type binOffset(binOffsetSEXP);
    Rcpp::traits::input_parameter< long >::type maxBinRead(maxBinReadSEXP);
    rcpp_result_gen = Rcpp::wrap(trackMatchingLines(filename, matchLines, prefixOnly, lineFeedOnly, binOffset, maxBinRead));
    return rcpp_result_gen;
END_RCPP
}
// trackMatchingStringBinPos
NumericVector trackMatchingStringBinPos(const Rcpp::String& filename, StringVector& candidateStrings, long binOffset, long maxBinRead, bool lineStartOnly);
RcppExport SEXP _rgeap_trackMatchingStringBinPos(SEXP filenameSEXP, SEXP candidateStringsSEXP, SEXP binOffsetSEXP, SEXP maxBinReadSEXP, SEXP lineStartOnlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type candidateStrings(candidateStringsSEXP);
    Rcpp::traits::input_parameter< long >::type binOffset(binOffsetSEXP);
    Rcpp::traits::input_parameter< long >::type maxBinRead(maxBinReadSEXP);
    Rcpp::traits::input_parameter< bool >::type lineStartOnly(lineStartOnlySEXP);
    rcpp_result_gen = Rcpp::wrap(trackMatchingStringBinPos(filename, candidateStrings, binOffset, maxBinRead, lineStartOnly));
    return rcpp_result_gen;
END_RCPP
}
// trackNextLineBinPos
NumericVector trackNextLineBinPos(const Rcpp::String& filename, long binOffset, int skipLines);
RcppExport SEXP _rgeap_trackNextLineBinPos(SEXP filenameSEXP, SEXP binOffsetSEXP, SEXP skipLinesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< long >::type binOffset(binOffsetSEXP);
    Rcpp::traits::input_parameter< int >::type skipLines(skipLinesSEXP);
    rcpp_result_gen = Rcpp::wrap(trackNextLineBinPos(filename, binOffset, skipLines));
    return rcpp_result_gen;
END_RCPP
}
// readBin2Mem
bool readBin2Mem(const Rcpp::String& filename, int skip, int binLen, intptr_t objPtr);
RcppExport SEXP _rgeap_readBin2Mem(SEXP filenameSEXP, SEXP skipSEXP, SEXP binLenSEXP, SEXP objPtrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< int >::type binLen(binLenSEXP);
    Rcpp::traits::input_parameter< intptr_t >::type objPtr(objPtrSEXP);
    rcpp_result_gen = Rcpp::wrap(readBin2Mem(filename, skip, binLen, objPtr));
    return rcpp_result_gen;
END_RCPP
}
// cleanOpenedStreams
bool cleanOpenedStreams();
RcppExport SEXP _rgeap_cleanOpenedStreams() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cleanOpenedStreams());
    return rcpp_result_gen;
END_RCPP
}
// multiSubstring
CharacterVector multiSubstring(std::string const& text, IntegerVector& starts, IntegerVector& sizes);
RcppExport SEXP _rgeap_multiSubstring(SEXP textSEXP, SEXP startsSEXP, SEXP sizesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string const& >::type text(textSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    rcpp_result_gen = Rcpp::wrap(multiSubstring(text, starts, sizes));
    return rcpp_result_gen;
END_RCPP
}
// max_index
uint64_t max_index(NumericVector& vals);
RcppExport SEXP _rgeap_max_index(SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vals(valsSEXP);
    rcpp_result_gen = Rcpp::wrap(max_index(vals));
    return rcpp_result_gen;
END_RCPP
}
// str_size
int str_size(const Rcpp::String& str);
RcppExport SEXP _rgeap_str_size(SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String& >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(str_size(str));
    return rcpp_result_gen;
END_RCPP
}
// min_index
uint64_t min_index(NumericVector& vals);
RcppExport SEXP _rgeap_min_index(SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vals(valsSEXP);
    rcpp_result_gen = Rcpp::wrap(min_index(vals));
    return rcpp_result_gen;
END_RCPP
}
// internalPtr
intptr_t internalPtr(RObject& obj);
RcppExport SEXP _rgeap_internalPtr(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RObject& >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(internalPtr(obj));
    return rcpp_result_gen;
END_RCPP
}
// getMemAddress
intptr_t getMemAddress(SEXP& obj, bool outMemInfo);
RcppExport SEXP _rgeap_getMemAddress(SEXP objSEXP, SEXP outMemInfoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< bool >::type outMemInfo(outMemInfoSEXP);
    rcpp_result_gen = Rcpp::wrap(getMemAddress(obj, outMemInfo));
    return rcpp_result_gen;
END_RCPP
}
// rawPtr
intptr_t rawPtr(RawVector& raw);
RcppExport SEXP _rgeap_rawPtr(SEXP rawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawVector& >::type raw(rawSEXP);
    rcpp_result_gen = Rcpp::wrap(rawPtr(raw));
    return rcpp_result_gen;
END_RCPP
}
// fixedRawPtr
intptr_t fixedRawPtr();
RcppExport SEXP _rgeap_fixedRawPtr() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fixedRawPtr());
    return rcpp_result_gen;
END_RCPP
}
// rawToCharVec
CharacterVector rawToCharVec(RawVector& raw, bool firstOnly);
RcppExport SEXP _rgeap_rawToCharVec(SEXP rawSEXP, SEXP firstOnlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawVector& >::type raw(rawSEXP);
    Rcpp::traits::input_parameter< bool >::type firstOnly(firstOnlySEXP);
    rcpp_result_gen = Rcpp::wrap(rawToCharVec(raw, firstOnly));
    return rcpp_result_gen;
END_RCPP
}
// charVecToRaw
RawVector charVecToRaw(StringVector& strvec);
RcppExport SEXP _rgeap_charVecToRaw(SEXP strvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type strvec(strvecSEXP);
    rcpp_result_gen = Rcpp::wrap(charVecToRaw(strvec));
    return rcpp_result_gen;
END_RCPP
}
// hasMinByteSize
bool hasMinByteSize(SEXP& obj, double minSize);
RcppExport SEXP _rgeap_hasMinByteSize(SEXP objSEXP, SEXP minSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type obj(objSEXP);
    Rcpp::traits::input_parameter< double >::type minSize(minSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(hasMinByteSize(obj, minSize));
    return rcpp_result_gen;
END_RCPP
}
// printPtrBytes
bool printPtrBytes(intptr_t ptr, unsigned int byteCount);
RcppExport SEXP _rgeap_printPtrBytes(SEXP ptrSEXP, SEXP byteCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< intptr_t >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type byteCount(byteCountSEXP);
    rcpp_result_gen = Rcpp::wrap(printPtrBytes(ptr, byteCount));
    return rcpp_result_gen;
END_RCPP
}
// multiFactorRebuild
List multiFactorRebuild(IntegerVector& indexes, IntegerVector& sizes, StringVector& levels);
RcppExport SEXP _rgeap_multiFactorRebuild(SEXP indexesSEXP, SEXP sizesSEXP, SEXP levelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type sizes(sizesSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type levels(levelsSEXP);
    rcpp_result_gen = Rcpp::wrap(multiFactorRebuild(indexes, sizes, levels));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rgeap_checkFileStructure", (DL_FUNC) &_rgeap_checkFileStructure, 1},
    {"_rgeap_trackMatchingLines", (DL_FUNC) &_rgeap_trackMatchingLines, 6},
    {"_rgeap_trackMatchingStringBinPos", (DL_FUNC) &_rgeap_trackMatchingStringBinPos, 5},
    {"_rgeap_trackNextLineBinPos", (DL_FUNC) &_rgeap_trackNextLineBinPos, 3},
    {"_rgeap_readBin2Mem", (DL_FUNC) &_rgeap_readBin2Mem, 4},
    {"_rgeap_cleanOpenedStreams", (DL_FUNC) &_rgeap_cleanOpenedStreams, 0},
    {"_rgeap_multiSubstring", (DL_FUNC) &_rgeap_multiSubstring, 3},
    {"_rgeap_max_index", (DL_FUNC) &_rgeap_max_index, 1},
    {"_rgeap_str_size", (DL_FUNC) &_rgeap_str_size, 1},
    {"_rgeap_min_index", (DL_FUNC) &_rgeap_min_index, 1},
    {"_rgeap_internalPtr", (DL_FUNC) &_rgeap_internalPtr, 1},
    {"_rgeap_getMemAddress", (DL_FUNC) &_rgeap_getMemAddress, 2},
    {"_rgeap_rawPtr", (DL_FUNC) &_rgeap_rawPtr, 1},
    {"_rgeap_fixedRawPtr", (DL_FUNC) &_rgeap_fixedRawPtr, 0},
    {"_rgeap_rawToCharVec", (DL_FUNC) &_rgeap_rawToCharVec, 2},
    {"_rgeap_charVecToRaw", (DL_FUNC) &_rgeap_charVecToRaw, 1},
    {"_rgeap_hasMinByteSize", (DL_FUNC) &_rgeap_hasMinByteSize, 2},
    {"_rgeap_printPtrBytes", (DL_FUNC) &_rgeap_printPtrBytes, 2},
    {"_rgeap_multiFactorRebuild", (DL_FUNC) &_rgeap_multiFactorRebuild, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rgeap(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
